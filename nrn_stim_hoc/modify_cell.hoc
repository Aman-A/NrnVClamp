// Calls correct cell model files given cell_id input
// 1-4 correspond to Mainen cells 
// 5-17 Traub cortical cells
objref cell_names, cell, nil, st, prune_secs // st is current stimulus for Mainen
objref main_ax_list, strobj // main axon SectionList, string object for finding min_comp_ind
objref secnames[numSect] // for saving secnames, and secnames when recording from multiple points w/in secitons
min_sec_ind = 0 // initialize to 0 
strdef cell_dir, current_dir // read Traub template names into cell_names List 
current_dir = getcwd()
// modify_cell(cell) // parameters should be defined
proc modify_cell() { local prune_meth localobj terminal_sec_str
	cell = $o1
	prune_meth = $2 // prune method 1 or 2		
	cell_rotated=0			
	if (synapses_on >= 1) {
		synapses_enabled = 1 // 1 for on, 0 for off in getParams()
	} else {
		synapses_enabled = 0
	}						
	if (replace_ax == 1) { // replace axon with initial segment
		cell.replace_axon()
		define_shape() // gives pt3d coordinates to new axon 
		//celsius = 34  // replicate original Blue-brain temperature 						
	} 	
	celsius = temp // set simulation temperature 
	printf("Temperature = %g C\n",celsius)		
	// insert xtra/extracellular and run setpointers/get secrefs()	
	forsec cell.all { // call setpointers() on original cell to get type_xtra of each original axon section				
		insert xtra		
		insert extracellular
	}
	//setpointers()	
	// Scale diameters and myelinate axon before setting pointers
	// Scale compartment diameters		
	if (scale_soma_area != 1) diam(0.5) = scale_soma_area*area(0.5)/(PI*L)
	if (scale_apic_diam != 1) scale_diam2(scale_apic_diam,cell.apical)
	if (scale_basal_diam != 1) scale_diam2(scale_basal_diam,cell.basal)		
	if (scale_basal_L != 1) forsec cell.basal L=L*scale_basal_L
	if (scale_ax != 1) scale_diam2(scale_ax,cell.axonal)
	// Get main axon of original axon
	// Prune axon if prune_ax >=1 for BLUE-BRAIN cells	
	// get main axon (most relevant for PCs) and prune sections (non-main axon axonal sections)
	objref main_ax_list 
	// defines main_ax_list and min_sec_ind (public variable)
	if (replace_ax == 1) {
		main_ax_list = new SectionList()
		forsec cell.axonal main_ax_list.append()
		setpointers()
	} else { // calls setpointers()
		if (prune_meth == 1) { // for method 1 cells use ascending approach				
			main_ax_list = get_main_ax()					
			print "Got main axon (1)"	
		} else if (prune_meth == 2) { // use descending approach for most axons (method 2)				
			main_ax_list = get_main_ax2()
			print "Got main axon (2)"
		} 
	}
	// prune axon if not replaced
	prune_secs = new SectionList()
	forsec cell.axonal prune_secs.append() // assign all axonal sections to prune_secs
	forsec main_ax_list prune_secs.remove() // remove main axon from prune_secs SectionList
	if (replace_ax != 1) {
		if (prune_ax > 0) {								
			axon_pruner(prune_ax,prune_secs) // runs setpointers() after pruning
		}
		// Run get_main_ax again to get new min_sec_ind
		if (prune_meth == 2) { // use descending approach for most axons
			main_ax_list = get_main_ax2()
		} else if (prune_meth == 1) { // for cell meth1cells use ascending approach
			main_ax_list = get_main_ax()						
		}	
	}
	// Myelinate axon after getting main axon, pruning, and scaling diameter					
	if (myelinate_ax && replace_ax != 1) {
		// forall { // call setpointers() on original cell to get type_xtra of each original axon section
		// 	insert xtra
		// 	insert extracellular
		// }
		// setpointers()		
		myelinate_axon(cell.axonal)	            			
	}		
	// Insert current clamp in soma
	cell.soma {
		st = new IClamp(0.5)
		st.dur = st_dur
		st.del = st_del
		st.amp = st_amp
	}
	printf("Created IClamp with amp %.2f nA, duration %.2f ms, delay %d ms\n",st.amp,st.dur,st.del)
	//define_shape()				
	numComp = 0
	forsec cell.all {
		if (myelinate_ax){ // re-insert for myelin
			insert xtra
			insert extracellular
		} 			
		numComp+= nseg		 // save number of compartments	
	}		
	printf("Inserted xtra and extracellular in all %g compartments\n",numComp)														
	if (myelinate_ax && replace_ax != 1){
		setpointers()  // if myelinate_ax, call 2nd time to include new myelinated axon sections
		// Get new main axon sections		
		if (prune_meth == 2) { // use descending approach for most axons
			main_ax_list = get_main_ax2()
		} else if (prune_meth == 1) { // for cell meth1cells use ascending approach
			main_ax_list = get_main_ax()						
		}
		prune_secs = new SectionList() // re-make for myelinated axon
		forsec cell.axonal prune_secs.append() // assign all axonal sections to prune_secs
		forsec main_ax_list prune_secs.remove() // remove main axon from prune_secs SectionList
	}        			
	// scale main axon
	if (scale_mainax != 1){
		scale_diam2(scale_mainax,main_ax_list)		
		print "Scaled main axon diameters"
	}
	// Modify axon for replace_ax == 2 or 3
	if (replace_ax == 2){ // disable activation at terminal node of main axon by enlarging radius  									
		secrefs.o(min_sec_ind).sec {
			diam(1) = 1000 // set end to 1000 µm diameter, Rin goes to ~ 0 				
		}
		terminal_sec_str = new String() // get name of main axon terminal section 
		secrefs.o(min_sec_ind).sec terminal_sec_str.s = secname() 
		printf("Set terminal: %s diameter to 1000\n",terminal_sec_str.s)			
	} else if (replace_ax == 3){ // make all axon terminals passive 
		forsec cell.axonal {
			if(type_xtra==2||type_xtra==5) {
				make_pas()
			}
		}
		printf("Made all axon terminals passive\n")													
	} else if (replace_ax == 4){ // make all terminals passive & disable terminal node of main axon by enlarging radius
		forsec cell.axonal {
			if(type_xtra==2||type_xtra==5) {
				make_pas()
			}
		}
		printf("Made all axon terminals passive\n")	
		secrefs.o(min_sec_ind).sec {
			diam(1) = 1000 // set to 1000 µm diameter, Rin goes to ~ 0 				
		}
		terminal_sec_str = new String() // get name of main axon terminal section 
		secrefs.o(min_sec_ind).sec terminal_sec_str.s = secname() 
		printf("Set terminal: %s diameter to 1000\n",terminal_sec_str.s)	
	}				
	// if (synapses_enabled==1) {
	// 	cell.synapses.active_pre_mtypes.copy(active_pre_mtypes) // set on synapses to 1
	// 	cell.synapses.pre_mtype_freqs.copy(pre_mtype_freqs) // set frequencies			
	// 	update_synapses() // creates synapse_plot object and runs cell.synapses.update_synapses			
	// 	printf("Updated synapses to user-specified settings\n")			
	// } 			
}
// axon_pruner(prune_ax,SectionList)
proc axon_pruner() { local max_order, prune_order, num_sec_del localobj seclist
	prune_order = $1 // prune all collaterals of order >= (max_order+1) - prune_order
	// e.g. if prune_order = 1, delete all max order collaterals 
	seclist = $o2
	if (prune_order >= 1) {				
		num_sec_del = 0		
		max_order = get_max_order(seclist) // gets maximum branch order		
		max_prune_order = max_order+1 - prune_order // prune axon collaterals with orders >= this value
		if (max_prune_order < 1) { // prune_order selected is >= max_order 
			max_prune_order = 1 // leaves only the 1st order collateral (e.g. axon initial segment)
		}
		print "max_prune_order=", max_prune_order
		forsec seclist if (order_xtra >= max_prune_order) {
			delete_section() // delete sections of equal or greater order	
			num_sec_del += 1
		}
		printf("Max order = %g, removed %g axonal collaterals of order >= %g\nRe-running setpointers()\n",max_order,num_sec_del,max_prune_order)
		setpointers()
	} else {
		printf("Axonal arbor left intact\n")
	}	
}
// max_order = get_max_order(SectionList) 
// gets maximum branch order of input SectionList
// SectionList should have have xtra inserted and should have order_xtra defined (setpointers())
func get_max_order() { local max_order localobj seclist
	seclist = $o1
	max_order = 0
	forsec seclist {
		if (ismembrane("xtra")){
			if (order_xtra > max_order) max_order = order_xtra // get max order 
		} else {
			print "xtra not inserted in ", secname()
		}
	}
	return max_order
}
//cell_chooser(cell_id)
//objref xScale, yScale, zScale
//create xScale, yScale, zScale
/*
proc anatscale() {	

	if ($4>0) {  // if length arg is <= 0 then do nothing
		xScale {
			pt3dclear()
			pt3dadd($1, $2, $3, 1)
			pt3dadd($1+$4, $2, $3, 1)
		}
		yScale {
			pt3dclear()
			pt3dadd($1, $2, $3, 1)
			pt3dadd($1, $2+$4, $3, 1)
		}
		zScale {
			pt3dclear()
			pt3dadd($1, $2, $3, 1)
			pt3dadd($1, $2, $3+$4, 1)
		}
	}
}

*/
objref synapse_plot
proc update_synapses(){
	synapse_plot = new Shape(0)
	//synapse_plot.view(-1200,-900,2200,1200,300,10,800,600)
	cell.synapses.update_synapses(synapse_plot)
}
func Lambda() { // input relative position x in section
	lambda = 10*sqrt( ((1/g_pas($1))*diam($1)*1e-4)/(4*Ra) ) // returns length constant in mm
	return lambda
}
func Tau() { // input relative position x in section
	tau = (1/g_pas($1))*cm*1e-3 // returns time constant in ms
	return tau
}
proc make_pas() {
	if (ismembrane("Ca_HVA")) uninsert Ca_HVA
	if (ismembrane("SKv3_1")) uninsert SKv3_1
	if (ismembrane("SK_E2")) uninsert SK_E2
	if (ismembrane("Ca_LVAst")) uninsert Ca_LVAst
	if (ismembrane("Ih")) uninsert Ih
	if (ismembrane("NaTs2_t")) uninsert NaTs2_t
	//if (ismembrane("CaDynamics_E2")) uninsert CaDynamics_E2
	if (ismembrane("Nap_Et2")) uninsert Nap_Et2
	if (ismembrane("K_Pst")) uninsert K_Pst
	if (ismembrane("K_Tst")) uninsert K_Tst
	if (ismembrane("NaTa_t")) uninsert NaTa_t
	if (ismembrane("Im")) uninsert Im

}

//input angle of phi rotation (about z-axis) and sectionlist
// z_rotate(angle,sectionlist)
proc z_rotate() { local phi, i localobj Rzvals, Rz, ri, rf, rotate_seclist
  phi = $1*PI/180 // convert to radians
  print "rotating cell"
  rotate_seclist = $o2
  Rz = new Matrix(3,3)
  Rzvals = new Vector()
  Rzvals.append(cos(phi), sin(phi), 0, -sin(phi), cos(phi), 0, 0, 0, 1)
  Rz.from_vector(Rzvals) // convert to matrix
  forsec rotate_seclist {
    N = n3d()
    for i = 0, N-1 {
      ri = new Vector() 
      ri.append(x3d(i),y3d(i),z3d(i)) // get ith coordinate as vector
      rf = new Vector() // vector for rotated coordinate
      rf = Rz.mulv(ri) // multiply coordinate vector by rotation matrix
      pt3dchange(i,rf.x[0],rf.x[1],rf.x[2],diam3d(i)) // change ith point, leave diameter unchanged
    }    
  }
}

 // same as MATLAB x_rotate, rotates cell 90° about x-axis to align S-D axis of cell with z-axis
 // x_rotate(cell.all)
proc x_rotate() { local alpha, i, xtra_flag localobj Rxvals, Rx, ri, rf, rotate_seclist 
	//alpha = PI/2
	print "Applying 90° x-rotation"
	xtra_flag = 0 // print warning that xtra not inserted once
	cell_rotated=1 // set to 1
	rotate_seclist = $o1
	/*
	Rx = new Matrix(3,3)
	Rxvals = new Vector()
	Rxvals.append(1,0,0,0,cos(alpha),sin(alpha),0,-sin(alpha),cos(alpha))
	Rx.from_vector(Rxvals) // convert to matrix
	*/	
	forsec rotate_seclist {		
		N = n3d()
		for i = 0, N-1 {
			ri = new Vector() 
			ri.append(x3d(i),y3d(i),z3d(i)) // get ith coordinate as vector
			rf = new Vector() // vector for rotated coordinate
			//rf = Rx.mulv(ri) // multiply coordinate vector by rotation matrix
			rf.append(ri.x[0],-ri.x[2],ri.x[1]) // rotation gives (x, -z, y) 
			pt3dchange(i,rf.x[0],rf.x[1],rf.x[2],diam3d(i)) // change ith point, leave diameter unchanged
		}
		if (ismembrane("xtra")){
			for(x,0) { // rotate differential vectors
				Dy_xtra(x) = -Dz_xtra(x)
				Dz_xtra(x) = Dy_xtra(x)
			}
		} else if (xtra_flag == 0) {
			print "xtra not inserted, rotating pt3d data only"
			xtra_flag = 1 // set to 1 so warning prints once
		}		
	}
}

// translate pt3d coordinates of cell, make sure to rerun setpointers()
// translate(SecList,x_shift,y_shift,z_shift)
proc translate(){ local i, xshift, yshift, zshift localobj trans_sec
	trans_sec = $o1
	xshift = $2
	yshift = $3
	zshift = $4
	forsec trans_sec {
		for i = 0,n3d()-1 {
			pt3dchange(i,x3d(i)+xshift,y3d(i)+yshift,z3d(i)+zshift,diam3d(i)) // move ith point, leave diameter unchanged
		}
	}
}
/* Replace the axon built from the original morphology file with a stub axon.  
    The stub axon will attempt to use diam info from original axon and L=30.                                                                                
*/                                                                             
// */
//create axon[1]
/*
proc replace_axon(){ local nSec, D1, D2, dist, count localobj axon_bp
                                                                                
    // preserve the number of original axonal sections                          
    nSec  = 0                                                                   
    forsec cell.axonal{nSec = nSec + 1}                                              
                                                                                
    // Try to grab info from original axon                                      
    if (nSec == 0) { //No axon section present                                    
        D1 = D2 = 1                                                             
    } else {                                                                    
        access cell.axon[0]                                                          
        D1 = D2 = diam          
        if( nSec > 1 ) { //More than one axon section present                    
            access cell.soma distance() //to calculate distance from soma            
            count = 0 
            // loop through all axon sections and check for 60um distance
            forsec cell.axonal {
                count = count + 1                                               
                dist = distance(0.5)
                // if section is longer than 60um then store diam 
                // and exit from loop                                            
                if( dist > 60 ) { 
                    D2 = diam                                                   
                    break                                                       
                }                                                               
            }                                                                   
        }                                                                       
    }                                                                           
          
    axon_bp = get_axon_biophys()    
    // Delete old axon                                                  
    forsec cell.axonal{delete_section()}
    
    // And create new one                                             
    create axon[2]
                                                                                
    // Set dimensions of new axon, and append sections to sectionlists
    access axon[0] {                                                            
        L = 30                                                              
        diam = D1                                                           
        nseg = 1 + 2*int(L/40)                                              
        cell.all.append()                                                            
        cell.axonal.append()                                                         
    }                            
    access axon[1] {                                                            
        L = 30                                                                  
        diam = D2                                                           
        nseg = 1 + 2*int(L/40)                                              
        cell.all.append()                                                            
        cell.axonal.append()                                                         
    }                                                                           
    nSecAxonal = 2                                                              
        
    // Connect sections to each other and to soma
    cell.soma[0] connect axon[0](0), 1                                           
    axon[0] connect axon[1](0), 1
    // Set axon biophysical parameters
    set_axon_biophys(axon_bp,cell.axonal)
    access cell.soma  	
    printf("Replaced axon with initial segment\n")                                         
} 
*/
// get conductances from original cell.axon[0], save to vector
obfunc get_axon_biophys() { localobj axon_bp
	axon_bp = new Vector(14)
	access cell.axon[0]		 	 	 				 	 	
	if (ismembrane("NaTa_t")) axon_bp.x[0] = gNaTa_tbar_NaTa_t
	if (ismembrane("K_Tst")) axon_bp.x[1] = gK_Tstbar_K_Tst
	if (ismembrane("CaDynamics_E2")) axon_bp.x[2] = gamma_CaDynamics_E2
	if (ismembrane("Nap_Et2")) axon_bp.x[3] = gNap_Et2bar_Nap_Et2
	if (ismembrane("SK_E2")) axon_bp.x[4] = gSK_E2bar_SK_E2
	if (ismembrane("Ca_HVA")) axon_bp.x[5] = gCa_HVAbar_Ca_HVA
	if (ismembrane("K_Pst")) axon_bp.x[6] = gK_Pstbar_K_Pst
	if (ismembrane("SKv3_1")) axon_bp.x[7] = gSKv3_1bar_SKv3_1
	if (ismembrane("CaDynamics_E2")) axon_bp.x[8] = decay_CaDynamics_E2
	if (ismembrane("Ca_LVAst")) axon_bp.x[9] = gCa_LVAstbar_Ca_LVAst
	if (ismembrane("Im")) axon_bp.x[10] = gImbar_Im
	if (ismembrane("Ca")) axon_bp.x[11] = gCabar_Ca
	axon_bp.x[12] = e_pas
	axon_bp.x[13] = g_pas
	return axon_bp	
}

proc set_axon_biophys() { localobj axon_bp, secList

	axon_bp = $o1
	secList = $o2
	forsec secList {
		insert pas
		if (axon_bp.x[0] != 0) insert NaTa_t
		if (axon_bp.x[1] != 0) insert K_Tst
		if (axon_bp.x[2] != 0) insert CaDynamics_E2
		if (axon_bp.x[3] != 0) insert Nap_Et2
		if (axon_bp.x[4] != 0) insert SK_E2
		if (axon_bp.x[5] != 0) insert Ca_HVA
		if (axon_bp.x[6] != 0) insert K_Pst
		if (axon_bp.x[7] != 0) insert SKv3_1
		// already checked to insert CaDynamics with axon_bp.x[2] (gamma)
		if (axon_bp.x[9] != 0) insert Ca_LVAst				
		if (axon_bp.x[10] != 0) insert Im
		if (axon_bp.x[11] != 0) insert Ca
		e_pas = axon_bp.x[12]
		g_pas = axon_bp.x[13]
		Ra = 100
		cm = 1		
		ena = 50
		ek = -85
		for(x,0) {
			// assign conductivity values from original axon (uniform)
			if (ismembrane("NaTa_t")) gNaTa_tbar_NaTa_t(x) = axon_bp.x[0]
			if (ismembrane("K_Tst")) gK_Tstbar_K_Tst(x) = axon_bp.x[1]
			if (ismembrane("CaDynamics_E2")) gamma_CaDynamics_E2(x) = axon_bp.x[2]
			if (ismembrane("Nap_Et2")) gNap_Et2bar_Nap_Et2(x) = axon_bp.x[3] 
			if (ismembrane("SK_E2")) gSK_E2bar_SK_E2(x) = axon_bp.x[4] 
			if (ismembrane("Ca_HVA")) gCa_HVAbar_Ca_HVA(x) = axon_bp.x[5]
			if (ismembrane("K_Pst")) gK_Pstbar_K_Pst(x) = axon_bp.x[6]
			if (ismembrane("SKv3_1")) gSKv3_1bar_SKv3_1(x) = axon_bp.x[7]
			if (ismembrane("CaDynamics_E2")) decay_CaDynamics_E2(x) = axon_bp.x[8]
			if (ismembrane("Ca_LVAst")) gCa_LVAstbar_Ca_LVAst(x) = axon_bp.x[9]
			if (ismembrane("Im")) gImbar_Im(x) = axon_bp.x[10] 
			if (ismembrane("Ca")) gCabar_Ca(x) = axon_bp.x[11]
		}


	}
}

// Generate shape plot with axon colored red, apical dends blue, basal dends green, and black point on soma 
objref shplot, soma_point
proc color_plot() {		
	//load_file("anatscale.hoc")
	shplot = new Shape(0)	
	shplot.view(-1200,-900,2200,1200,300,10,800,600)
	shplot.color_list(cell.axonal,2)
	shplot.color_list(cell.apical,3)
	shplot.color_list(cell.basal,4)
	cell.soma soma_point = new IClamp(0.5)
	shplot.point_mark(soma_point,1,"O",10)	
	if (cell_rotated) shplot.rotate(1,0,0,PI/2,0,0)
	
}
objref shplot2
proc color_sec() { // access section then execute color_sec()		
	shplot2 = new Shape(0)	
	shplot2.view(-1200,-900,2200,1200,300,10,800,600)
	shplot2.color(2)	
}
objref shplot3, soma_point3, pElec
// input 1 to save fig, 0 just to plot
proc color_plotm() { local save_fig
	save_fig = $1 	
	//load_file("anatscale.hoc")
	shplot3 = new Shape(0)	
	shplot3.view(-1366.28, -1000, 2932.55, 2200, 424, 0, 800.64, 600.64)
	shplot3.color_list(iseg_secList,5)
	shplot3.color_list(Node_secList,2)
	shplot3.color_list(Myelin_secList,1)
	shplot3.color_list(Unmyelin_secList,5)
	shplot3.color_list(cell.apical,3)
	shplot3.color_list(cell.basal,4)
	cell.soma soma_point3 = new IClamp(0.5)
	shplot3.point_mark(soma_point3,1,"O",3)
	if (cell_rotated) shplot3.rotate(1,0,0,PI/2,0,0)
	if (save_fig) {
		strdef cellfile
		sprint(cellfile,"Cell%g.eps",cell_id)
		shplot3.printfile(cellfile)
	}	
	if (load_potentials==3) {
		objref pElec
		sElec pElec = new PointProcessMark(0.5)
		shplot3.point_mark(pElec,2) // mark electrode point
	}
}

proc color_plotmax() { local save_fig
	save_fig = $1 	
	//load_file("anatscale.hoc")
	shplot3 = new Shape(0)	
	shplot3.view(-1366.28, -1000, 2932.55, 2200, 424, 0, 800.64, 600.64)
	shplot3.color_list(cell.axonal,1)
	shplot3.color_list(main_ax_list,2)	
	shplot3.color_list(cell.apical,3)
	shplot3.color_list(cell.basal,4)
	cell.soma soma_point3 = new IClamp(0.5)
	shplot3.point_mark(soma_point3,1,"O",10)
	if (cell_rotated) shplot3.rotate(1,0,0,PI/2,0,0)
	if (save_fig) {
		strdef cellfile
		sprint(cellfile,"Cell%g.eps",cell_id)
		shplot3.exec_menu("View = plot")
		shplot3.printfile(cellfile)
	}	
	if (load_potentials==3) {
		objref pElec
		sElec pElec = new PointProcessMark(0.5)
		shplot3.point_mark(pElec,2) // mark electrode point
	}
}
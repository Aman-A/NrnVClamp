// MATLAB script V_data produces text file with single vector of calculated potential for 
// every segment coordinate. This procedure assigns each potential to its respective node 
// in es_xtra(x), which is a range variable that points to e_extracullar
// es_xtra(x) is scaled with the stimulation waveform contained in stim_waveform.hoc
cell_rotated = 0 // default cell unrotated
xe = 10 // µm electrode default position
ye = 10 // µm
ze = 10  // µm 
create sElec
proc getes() {

	if (load_potentials == 1) { // Load Ve from MATLAB
		strdef V_data_file
		//sprint(V_data_file,"Params/%s/V_data.txt",run_name)
		V_data_file = "V_data.txt"
		ropen(V_data_file)
		forall {
			if (ismembrane("xtra")) {
				for (x,0) {			
				es_xtra(x) = fscan()	// reads next potential value from txt file
				}
			}
		}
		ropen()
		print "Read potential values from text file"		
	} else if (load_potentials == 0) { // Calc Ve in NEURON
		// Rotate cell if necessary to align S-D axis with z-axis
		if (cell_rotated == 0) {			
			x_rotate(cell.all) // sets cell_rotated to 1		
			setpointers()	
			printf("Rotated cell\n")		
		}
		// Calculate potentials for uniform E-field in NEURON 
		calces(theta,phi)
		printf("Calculated potentials in NEURON for theta = %g, phi = %g. cell_rotated = %g\n",theta,phi,cell_rotated)		
	} else if (load_potentials == 2) { // Load Efield from MATLAB, calculate pseudopoentials
		// Rotate cell if necessary to align S-D axis with z-axis
		if (cell_rotated == 0) {			
			x_rotate(cell.all) // sets cell_rotated to 1			
			setpointers()			
		}
		// Calculate pseudo-potentials for non-uniform E-field distribution in NEURON
		printf("Calculating pseudo-potentials in NEURON for input E-field distribution...\n")				
		calc_pseudo_es()				
	} else if (load_potentials==3){ // use current point source at xe, ye, ze
		// Rotate cell if necessary to align S-D axis with z-axis
		if (cell_rotated == 0) {
			x_rotate(cell.all) // sets cell_rotated to 1
			setpointers()			
		}
		// Calculate potentials at each compartmentf or current point-source
		printf("Calculating potentials in NEURON for current point-source at (%.1f,%.1f,%.1f) um\n",xe,ye,ze)
		calcesI(xe,ye,ze)	
		create sElec			
		objref pElec
		sElec pElec = new PointProcessMark(0.5)
		//sElec.point_mark(pElec,2)
		sElec {
			// make it 1 um long
			pt3dclear()
			pt3dadd(xe-5, ye, ze, 1)
			pt3dadd(xe+5, ye, ze, 1)
		}		
	}
	print "Saved to es_xtra(x)"
}

//getes()

// input theta, and phi angles of E-field
proc calces() { local theta,phi, Ex, Ey, Ez
	theta = $1
	phi = $2
	theta = theta*PI/180
	phi = phi*PI/180
	Ex = sin(theta)*cos(phi)
	Ey = sin(theta)*sin(phi)
	Ez = cos(theta)
	forall {
		if (ismembrane("xtra")) {
			for(x,0){
				es_xtra(x) = -(Ex*x_xtra(x) + Ey*y_xtra(x) + Ez*z_xtra(x))*1e-3 // Ve in [mV] <= µm*1e-3 = mm * 1mV/mm = mV
			}
		}
	}
}
// Load Ex,Ey,Ez calculate Ve using pseudo-potential integration method
objref Exyz
proc calc_pseudo_es() { local i, n localobj Er_file, somachildi_secref, numComps_sec//, Exyz
	strdef Er_file_name
	//sprint(Er_file_name,"Params/%s/Er.txt",run_name)	
	Er_file_name = "Er.txt"
	Er_file = new File(Er_file_name)
	Er_file.ropen()	
	Exyz = new Matrix()
	Exyz.scanf(Er_file,numComp,3)	
	// assign Ex, Ey, Ez to each compartment
	i = 0
	forall {
		if (ismembrane("xtra")) {
			for (x,0) {
				Ex_xtra = Exyz.getval(i,0)
				Ey_xtra = Exyz.getval(i,1)
				Ez_xtra = Exyz.getval(i,2)
				i += 1
			}
		}
	}	
	printf("Read %g E(x,y,z) values from %s and assigned to Ex_xtra,Ey_xtra,Ez_xtra\n",Exyz.nrow,Er_file_name)
	// traverse tree while numerically integrating Ve along paths
	access secrefs.o(0).sec // access soma
	// set soma as ground, Ve = 0
	secrefs.o(0).sec {	//should have nseg = 1	
		Ex0 = Ex_xtra
		Ey0 = Ey_xtra
		Ez0 = Ez_xtra // pass E-field to children to get E-field between 1st compartment and soma
		x0 = x_xtra
		y0 = y_xtra
		z0 = z_xtra // pass compartment coordinate to children
		//printf("x0 = %f, y0 = %f, z0 = %f\n",x0,y0,z0)
		//es_xtra = -1e-3*(Ex0*x_xtra + Ey0*y_xtra + Ez0*z_xtra)
		es_xtra = 0
	}
	
	for n = 0, secrefs.o(0).nchild() - 1{
		secrefs.o(0).child[n] { // start from each child branch of soma
			somachildi_secref = new SectionRef()
			traverse_tree2(secrefs.o(0).sec.es_xtra,x0,y0,z0,Ex0,Ey0,Ez0,somachildi_secref)
		}
	}
	

}

//sigma_e = 1/(500*1e4) // S/µm
sigma_e = 2.76e-7 // S/µm - conductivity in GM
proc calcesI(){ local x0,y0,z0, r
	x0 = $1 // electrode position in um
	y0 = $2
	z0 = $3
	forall {
		if (ismembrane("xtra")){
			for(x,0){
				r = sqrt((x_xtra(x)-x0)^2 + (y_xtra(x)-y0)^2+(z_xtra(x)-z0)^2) // distance from compartment to electrode (µm)
				es_xtra(x) = 1e-3/(4*PI*sigma_e*r) // Ve for I=1 µA (modify with stim_amp)
			}
		}
	}		
}

proc traverse_tree2() { local ii, j, xr, xr_i, x0, y0, z0, Ve_prev,Ex_prev,Ey_prev,Ez_prev localobj current_secref, child_secref,parent_secref, range
	Ve_prev = $1
	x0 = $2
	y0 = $3
	z0 = $4
	Ex_prev = $5
	Ey_prev = $6
	Ez_prev = $7
	current_secref = $o8	
	/*	
	current_secref.sec {		
		print " "
		print secname()		
	}	
	*/	
	
	current_secref.sec {
		// get normalized positions of coordinates (x)
		range = new Vector(nseg+2)
		range.indgen(1/nseg)
		range.sub(1/(2*nseg))
		range.x[0] = 0
		range.x[nseg+1] = 1
		xr = range.x[1] // first compartment's x value

		// Calculate Ve at first compartment using parent's last Ve and E vector	
		es_xtra(xr) = Ve_prev - (1/2)*1e-3*( (Ex_prev + Ex_xtra(xr))*(x_xtra(xr)-x0) + (Ey_prev + Ey_xtra(xr))*(y_xtra(xr)-y0) + (Ez_prev + Ez_xtra(xr))*(z_xtra(xr)-z0) ) // mV
		//printf("z0 = %f, z_xtra(xr) = %f, Ez_prev = %f, Ez_xtra(xr) = %f\n", z0, z_xtra(xr), Ez_prev, Ez_xtra(xr))
		//print "Ve_prev = ", Ve_prev, " ", "es(0) = ", es_xtra(0)
		// Calculate Ve for rest of compartments using backwards averaging of E vectors (Dx,Dy,Dz used backwards diff)
		for ii = 2,nseg {
				xr = range.x[ii]
				xr_i = range.x[ii-1]
				es_xtra(xr) = es_xtra(xr_i) - (1/2)*1e-3*(  (Ex_xtra(xr) + Ex_xtra(xr_i))*Dx_xtra(xr) + (Ey_xtra(xr) + Ey_xtra(xr_i))*Dy_xtra(xr) + (Ez_xtra(xr) + Ez_xtra(xr_i))*Dz_xtra(xr) )
				//print "es_xtra(xr) ", es_xtra(xr)
			}
	}
	
	// continue with depth
	if (current_secref.nchild == 0) { 			
		/*
		current_secref.sec {
			printf("Reached terminal at %s, order is %g\n",secname(),current_secref.sec.order_xtra)
		}	
		*/		
		// return to most recent branch point
		not_branch = 1
		while (not_branch==1) {
			current_secref.parent {				
				current_secref = new SectionRef()				
				if (current_secref.nchild>1) {
					not_branch = 0 					
					//print "exiting while"
				} else {					
					//order -= 1
					//print "still in while"
				}
			}
		}
	} else if (current_secref.nchild() == 1) {			
		/*
		current_secref.sec {
			printf("1 Child at %s, order is %g\n",secname(),current_secref.sec.order_xtra)
		}				
		*/			
		current_secref.child[0] {
			child_secref = new SectionRef()			
		}				
		current_secref.sec {
			traverse_tree2(es_xtra(1),x_xtra(1),y_xtra(1),z_xtra(1),Ex_xtra(1),Ey_xtra(1),Ez_xtra(1),child_secref)		
		}		
	} else { // 2 or more children	
		/*			
		current_secref.sec {
			printf("%g Children in %s, order is %g\n",current_secref.nchild(),secname(),current_secref.sec.order_xtra)
		}				
		*/	
		for j = 0, current_secref.nchild() - 1 {
			current_secref.child[j] {
				child_secref = new SectionRef()				
				//child_secref.sec {print secname(), " order = ", order_xtra, "new order = ", order}
			}
			current_secref {
				traverse_tree2(es_xtra(1),x_xtra(1),y_xtra(1), z_xtra(1), Ex_xtra(1),Ey_xtra(1),Ez_xtra(1),child_secref)				
			}			
		}
	}
}


